// Generated by CoffeeScript 2.3.2
(function() {
  var $, alpha, canvas, color, dataURItoBlob, drawText, el, file, makeStyle, readFile, redraw, space, text, textCtx;

  $ = function(sel) {
    return document.querySelector(sel);
  };

  el = {
    image: $('#image'),
    text: $('#text'),
    graph: $('#graph'),
    color: $('#color'),
    alpha: $('#alpha'),
    space: $('#space')
  };

  file = null;

  canvas = null;

  text = el.text.value;

  color = el.color.value;

  alpha = el.alpha.value;

  space = el.space.value;

  textCtx = null;

  redraw = null;

  dataURItoBlob = function(dataURI) {
    var arr, binStr, i, k, len, ref;
    binStr = atob((dataURI.split(','))[1]);
    len = binStr.length;
    arr = new Uint8Array(len);
    for (i = k = 0, ref = len - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {
      arr[i] = binStr.charCodeAt(i);
    }
    return new Blob([arr], {
      type: 'image/png'
    });
  };

  readFile = function() {
    var fileReader;
    if (file == null) {
      return;
    }
    fileReader = new FileReader;
    fileReader.onload = function() {
      var img;
      img = new Image;
      img.onload = function() {
        var ctx;
        canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        textCtx = null;
        ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        redraw = function() {
          ctx.rotate(315 * Math.PI / 180);
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.drawImage(img, 0, 0);
          return ctx.rotate(45 * Math.PI / 180);
        };
        drawText();
        el.graph.innerHTML = '';
        el.graph.appendChild(canvas);
        return canvas.addEventListener('click', function() {
          var blob, imageData, link;
          link = document.createElement('a');
          link.download = 'image.png';
          imageData = canvas.toDataURL('image/png');
          blob = dataURItoBlob(imageData);
          link.href = URL.createObjectURL(blob);
          return setTimeout(function() {
            return link.click();
          }, 100);
        });
      };
      return img.src = fileReader.result;
    };
    return fileReader.readAsDataURL(file);
  };

  makeStyle = function() {
    var match;
    match = color.match(/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i);
    return 'rgba(' + (parseInt(match[1], 16)) + ',' + (parseInt(match[2], 16)) + ',' + (parseInt(match[3], 16)) + ',' + alpha + ')';
  };

  drawText = function() {
    var i, j, k, l, margin, ref, ref1, ref2, step, textSize, width, x, y;
    if ((canvas == null) || text.length === 0) {
      return;
    }
    textSize = Math.max(15, (Math.min(canvas.width, canvas.height)) / 25);
    if (textCtx != null) {
      redraw();
    } else {
      textCtx = canvas.getContext('2d');
      textCtx.font = 'bold ' + textSize + 'px -apple-system,"Helvetica Neue",Helvetica,Arial,"PingFang SC","Hiragino Sans GB","WenQuanYi Micro Hei","Microsoft Yahei",sans-serif';
      textCtx.rotate(45 * Math.PI / 180);
    }
    textCtx.fillStyle = makeStyle();
    width = (textCtx.measureText(text)).width;
    step = Math.sqrt((Math.pow(canvas.width, 2)) + (Math.pow(canvas.height, 2)));
    margin = (textCtx.measureText('啊')).width;
    x = Math.ceil(step / (width + margin));
    y = Math.ceil((step / (space * textSize)) / 2);
    for (i = k = 0, ref = x; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = ref1 = -y, ref2 = y; (ref1 <= ref2 ? l <= ref2 : l >= ref2); j = ref1 <= ref2 ? ++l : --l) {
        textCtx.fillText(text, (width + margin) * i, space * textSize * j);
      }
    }
  };

  el.image.addEventListener('change', function() {
    var ref;
    file = this.files[0];
    if ((ref = file.type) !== 'image/png' && ref !== 'image/jpeg' && ref !== 'image.gif') {
      return alert('仅支持 png, jpg, gif 图片格式');
    }
    return readFile();
  });

  el.text.addEventListener('input', function() {
    text = this.value;
    return drawText();
  });

  el.alpha.addEventListener('input', function() {
    alpha = this.value;
    return drawText();
  });

  el.color.addEventListener('input', function() {
    color = this.value;
    return drawText();
  });

  el.space.addEventListener('input', function() {
    space = this.value;
    return drawText();
  });

}).call(this);
