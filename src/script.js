// Generated by CoffeeScript 2.7.0
(function() {
  var $, applyImageWatermark, applyTextWatermark, applyWatermarkToPDFPage, autoRefresh, canvas, checkPDFJSLibrary, clearSelectionBtn, createErrorPlaceholder, createFileBlob, createPDFBlob, createPagePreview, currentPDFPages, dataURItoBlob, downloadAsImages, downloadAsPDF, downloadSelectedPages, downloadSelectedPagesBtn, drawImageWatermark, drawImageWatermarkOnCanvas, drawText, drawTextWatermarkOnCanvas, file, fileUploadLabel, generateFileName, getFontFamily, graph, image, imageWatermarkOptions, imageWatermarkRadio, initializePreviewArea, input, inputItems, insertPageInOrder, isProcessing, isUpdatingPreview, lastUpdateTime, makeStyle, originalFileName, originalFileType, pdfDocument, pdfPageCountSpan, pdfPagesContainer, pdfPagesDiv, previewSelectedPages, previewSelectedPagesBtn, processedCanvases, readFile, readImageFile, readPDFFile, redraw, refresh, refreshMultiPagePreview, refreshSinglePreviewPage, renderPagesSequentially, renderPreviewPages, rerenderPDFPages, rerenderSinglePDFPage, selectAllPagesBtn, selectedPageCountSpan, selectedPages, setupCanvas, state, textCtx, textWatermarkOptions, textWatermarkRadio, updatePreviewArea, updateRangeValues, updateSelectedPageCount, updateTimeout, watermarkImage, watermarkImageFile, watermarkType,
    indexOf = [].indexOf;

  $ = function(sel) {
    return document.querySelector(sel);
  };

  inputItems = ['text', 'color', 'alpha', 'angle', 'space', 'size', 'font-family', 'watermark-position'];

  input = {};

  image = $('#image');

  graph = $('#graph');

  refresh = $('#refresh');

  autoRefresh = $('#auto-refresh');

  textWatermarkRadio = $('#text-watermark');

  imageWatermarkRadio = $('#image-watermark');

  textWatermarkOptions = $('#text-watermark-options');

  imageWatermarkOptions = $('#image-watermark-options');

  watermarkImage = $('#watermark-image');

  pdfPagesContainer = $('#pdf-pages-container');

  pdfPagesDiv = $('#pdf-pages');

  selectAllPagesBtn = $('#select-all-pages');

  clearSelectionBtn = $('#clear-selection');

  previewSelectedPagesBtn = $('#preview-selected-pages');

  downloadSelectedPagesBtn = $('#download-selected-pages');

  pdfPageCountSpan = $('#pdf-page-count');

  selectedPageCountSpan = $('#selected-page-count');

  file = null;

  originalFileType = null;

  originalFileName = null;

  watermarkImageFile = null;

  canvas = null;

  textCtx = null;

  redraw = null;

  watermarkType = 'text';

  pdfDocument = null;

  selectedPages = new Set();

  processedCanvases = new Map(); // 使用Map存储处理过的画布，key为页码

  isProcessing = false;

  currentPDFPages = []; // 存储当前PDF的页面数据用于实时预览

  updateTimeout = null; // 用于节流预览更新

  lastUpdateTime = 0; // 上次更新时间

  isUpdatingPreview = false; // 防止递归调用的标志

  
  // 应用状态对象
  state = {
    currentPDF: null,
    textWatermark: false,
    imageWatermark: false
  };

  // 自动更新预览区域（简化版，使用直接的延迟更新和防递归标志）
  updatePreviewArea = function() {
    console.log(`调用 updatePreviewArea(), isUpdatingPreview = ${isUpdatingPreview}`);
    
    // 如果已经在更新中，则忽略此次调用
    if (isUpdatingPreview) {
      console.log("预览区域正在更新中，忽略此次调用");
      return;
    }
    if (updateTimeout) {
      
      // 清除之前的延迟更新
      clearTimeout(updateTimeout);
    }
    
    // 设置新的延迟更新 - 100ms的短延迟保证响应性
    return updateTimeout = setTimeout(function() {
      var emptyMessage, err, loadingMessage, pagesArray, previewContainer, processedCount;
      // 设置更新标志，防止递归调用
      isUpdatingPreview = true;
      console.log("执行延迟的预览更新，设置isUpdatingPreview = true");
      try {
        // 清空之前的预览
        graph.innerHTML = '<div class="preview-container"></div>';
        previewContainer = graph.querySelector('.preview-container');
        
        // 如果没有选中页面，显示提示
        if (selectedPages.size === 0) {
          emptyMessage = document.createElement('div');
          emptyMessage.className = 'empty-preview-message';
          emptyMessage.innerHTML = '<i class="fas fa-info-circle"></i> 请在PDF页面管理区选择要添加水印的页面';
          previewContainer.appendChild(emptyMessage);
          
          // 完成更新，重置标志
          isUpdatingPreview = false;
          console.log("没有选中页面，重置isUpdatingPreview = false");
          return;
        }
        
        // 显示正在加载的提示
        loadingMessage = document.createElement('div');
        loadingMessage.className = 'loading-preview-message';
        loadingMessage.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 正在生成预览...';
        previewContainer.appendChild(loadingMessage);
        
        // 获取排序后的页面数组
        pagesArray = Array.from(selectedPages).sort(function(a, b) {
          return a - b;
        });
        processedCount = 0;
        
        // 强制清除缓存，确保每次都使用最新的水印设置
        if (processedCanvases != null) {
          processedCanvases.clear();
          console.log("已清除处理缓存");
        }
        
        // 渲染选中的页面
        console.log(`开始渲染预览页面，共${pagesArray.length}页`);
        return renderPreviewPages(pagesArray, previewContainer, processedCount, loadingMessage, function() {
          // 在渲染完成后重置标志
          isUpdatingPreview = false;
          return console.log("预览渲染完成，重置isUpdatingPreview = false");
        });
      } catch (error1) {
        err = error1;
        // 确保错误情况下也重置标志
        isUpdatingPreview = false;
        return console.error("预览更新出错:", err);
      }
    }, 100);
  };

  // 渲染预览页面
  renderPreviewPages = function(pagesArray, previewContainer, processedCount, loadingMessage, onComplete) {
    var pageNum;
    if (processedCount >= pagesArray.length) {
      // 所有页面处理完成，移除加载提示
      if (loadingMessage != null) {
        loadingMessage.remove();
      }
      console.log("所有预览页面渲染完成");
      if (typeof onComplete === "function") {
        onComplete();
      }
      return;
    }
    pageNum = pagesArray[processedCount];
    console.log(`渲染预览页面 ${pageNum}, 进度: ${processedCount + 1}/${pagesArray.length}`);
    
    // 确保PDF已加载
    if (state.currentPDF == null) {
      return;
    }
    return state.currentPDF.getPage(pageNum).then(function(page) {
      var context, pageCanvas, renderContext, scale, viewport;
      scale = 1.5; // 预览质量
      viewport = page.getViewport({
        scale: scale
      });
      pageCanvas = document.createElement('canvas');
      pageCanvas.width = viewport.width;
      pageCanvas.height = viewport.height;
      context = pageCanvas.getContext('2d');
      renderContext = {
        canvasContext: context,
        viewport: viewport
      };
      return page.render(renderContext).promise.then(function() {
        var pagePreviewDiv, pageTitle;
        console.log(`页面${pageNum}基础渲染完成，应用水印`);
        
        // 应用水印
        if (watermarkType === 'text' && input.text.value) {
          console.log(`应用文字水印到页面${pageNum}`);
          drawTextWatermarkOnCanvas(pageCanvas, context);
        } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
          console.log(`应用图片水印到页面${pageNum}`);
          drawImageWatermarkOnCanvas(pageCanvas, context);
        } else {
          console.log(`没有应用水印到页面${pageNum}: watermarkType=${watermarkType}, text=${!!input.text.value}, image=${!!watermarkImageFile}`);
        }
        
        // 添加到预览容器
        pagePreviewDiv = document.createElement('div');
        pagePreviewDiv.className = 'preview-page';
        pagePreviewDiv.dataset.pageNum = pageNum;
        pageTitle = document.createElement('h5');
        pageTitle.textContent = `第 ${pageNum} 页`;
        pagePreviewDiv.appendChild(pageTitle);
        
        // 设置canvas样式
        pageCanvas.className = 'canvas-preview';
        pageCanvas.style.maxWidth = '100%';
        pageCanvas.style.border = '1px solid #ddd';
        pageCanvas.style.borderRadius = '4px';
        pagePreviewDiv.appendChild(pageCanvas);
        
        // 添加点击下载功能
        pageCanvas.addEventListener('click', function() {
          var blob, downloadFormat, imageData, link, ref;
          downloadFormat = ((ref = document.querySelector('input[name="download-format"]:checked')) != null ? ref.value : void 0) || 'png';
          link = document.createElement('a');
          link.download = generateFileName(pageNum, true);
          if (downloadFormat === 'png') {
            imageData = pageCanvas.toDataURL('image/png');
          } else {
            imageData = pageCanvas.toDataURL(`image/${downloadFormat}`, 0.95);
          }
          blob = dataURItoBlob(imageData);
          link.href = URL.createObjectURL(blob);
          document.body.appendChild(link);
          link.click();
          return document.body.removeChild(link);
        });
        
        // 将预览添加到容器
        previewContainer.appendChild(pagePreviewDiv);
        
        // 处理下一页
        processedCount++;
        return renderPreviewPages(pagesArray, previewContainer, processedCount, loadingMessage, onComplete);
      }).catch(function(error) {
        // console.error(`预览渲染第${pageNum}页失败:`, error);
        processedCount++;
        return renderPreviewPages(pagesArray, previewContainer, processedCount, loadingMessage, onComplete);
      });
    }).catch(function(error) {
      // console.error(`获取第${pageNum}页失败:`, error);
      processedCount++;
      return renderPreviewPages(pagesArray, previewContainer, processedCount, loadingMessage, onComplete);
    });
  };

  // 更新范围值显示
  updateRangeValues = function() {
    ($('#alpha-value')).textContent = Math.round(input.alpha.value * 100) + '%';
    ($('#angle-value')).textContent = input.angle.value + '°';
    ($('#space-value')).textContent = input.space.value + 'x';
    return ($('#size-value')).textContent = input.size.value + 'x';
  };

  // 更新选中页面计数
  updateSelectedPageCount = function() {
    return selectedPageCountSpan.textContent = `已选择 ${selectedPages.size} 页`;
  };

  // 检查PDF.js库是否正确加载
  checkPDFJSLibrary = function() {
    if (typeof pdfjsLib === 'undefined') {
      console.error('PDF.js 库未加载');
      return false;
    }
    if (typeof pdfjsLib.getDocument !== 'function') {
      console.error('PDF.js 库加载不完整');
      return false;
    }
    console.log('PDF.js 库检查通过');
    return true;
  };

  dataURItoBlob = function(dataURI) {
    var arr, binStr, i, k, len, ref;
    binStr = atob((dataURI.split(','))[1]);
    len = binStr.length;
    arr = new Uint8Array(len);
    for (i = k = 0, ref = len - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {
      arr[i] = binStr.charCodeAt(i);
    }
    return new Blob([arr], {
      type: 'image/png'
    });
  };

  generateFileName = function(pageNum = null, keepOriginalFormat = false) {
    var baseName, d, extension, pad, ref, timestamp;
    pad = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return n;
      }
    };
    d = new Date();
    timestamp = '' + d.getFullYear() + '-' + (pad(d.getMonth() + 1)) + '-' + (pad(d.getDate())) + '_' + (pad(d.getHours())) + (pad(d.getMinutes())) + (pad(d.getSeconds()));
    if (keepOriginalFormat && originalFileName) {
      // 保持原始文件名和格式
      baseName = originalFileName.replace(/\.[^\/.]+$/, "");
      extension = ((ref = originalFileName.match(/\.[^\/.]+$/)) != null ? ref[0] : void 0) || '.png';
      if (pageNum != null) {
        return `${baseName}_page${pageNum}_watermarked_${timestamp}${extension}`;
      } else {
        return `${baseName}_watermarked_${timestamp}${extension}`;
      }
    } else {
      // 使用PNG格式
      if (pageNum != null) {
        return `page_${pageNum}_watermarked_${timestamp}.png`;
      } else {
        return `watermarked_${timestamp}.png`;
      }
    }
  };

  // 根据文件类型创建对应的blob
  createFileBlob = function(canvas, format = 'png') {
    var dataURI;
    if (format.toLowerCase() === 'pdf') {
      return createPDFBlob(canvas);
    } else {
      dataURI = canvas.toDataURL(`image/${format}`, 0.95);
      return dataURItoBlob(dataURI);
    }
  };

  // 创建PDF格式的blob
  createPDFBlob = function(canvasArray) {
    var error, firstCanvas, imgData, index, jsPDFLib, k, len1, pdf, ref;
    // 检查jsPDF是否可用
    jsPDFLib = window.jsPDF || ((ref = window.jspdf) != null ? ref.jsPDF : void 0);
    if (jsPDFLib == null) {
      return null;
    }
    if (!Array.isArray(canvasArray)) {
      canvasArray = [canvasArray];
    }
    if (canvasArray.length === 0) {
      return null;
    }
    
    // 使用第一个canvas确定PDF尺寸
    firstCanvas = canvasArray[0];
    if (firstCanvas == null) {
      return null;
    }
    try {
      pdf = new jsPDFLib({
        orientation: firstCanvas.width > firstCanvas.height ? 'landscape' : 'portrait',
        unit: 'px',
        format: [firstCanvas.width, firstCanvas.height]
      });
      for (index = k = 0, len1 = canvasArray.length; k < len1; index = ++k) {
        canvas = canvasArray[index];
        if (index > 0) {
          pdf.addPage([canvas.width, canvas.height]);
        }
        imgData = canvas.toDataURL('image/jpeg', 0.95);
        pdf.addImage(imgData, 'JPEG', 0, 0, canvas.width, canvas.height);
      }
      return pdf.output('blob');
    } catch (error1) {
      error = error1;
      console.error('PDF生成失败:', error);
      return null;
    }
  };

  readFile = function() {
    if (file == null) {
      return;
    }
    
    // 记录原始文件信息
    originalFileType = file.type;
    originalFileName = file.name;
    // 检查文件类型
    if (file.type === 'application/pdf') {
      return readPDFFile();
    } else if (file.type.startsWith('image/')) {
      return readImageFile();
    } else {
      return alert('仅支持图片文件 (png, jpg, gif, webp, bmp, svg) 和 PDF 文件');
    }
  };

  readImageFile = function() {
    var fileReader;
    fileReader = new FileReader();
    fileReader.onload = function() {
      var img;
      img = new Image();
      img.onload = function() {
        return setupCanvas(img);
      };
      return img.src = fileReader.result;
    };
    return fileReader.readAsDataURL(file);
  };

  readPDFFile = function() {
    var fileReader;
    if (!checkPDFJSLibrary()) {
      alert('PDF.js 库未正确加载，请刷新页面重试');
      return;
    }
    console.log('PDF文件读取开始...');
    fileReader = new FileReader();
    fileReader.onload = function() {
      var generalError, loadingTask;
      console.log('PDF文件读取完成，文件大小:', fileReader.result.byteLength, '字节');
      try {
        loadingTask = pdfjsLib.getDocument(fileReader.result);
        console.log('PDF解析任务已创建');
        return loadingTask.promise.then(function(pdf) {
          var loadingDiv, numPages;
          console.log('PDF解析成功，页数:', pdf.numPages);
          state.currentPDF = pdf;
          pdfDocument = pdf;
          numPages = pdf.numPages;
          
          // 清空之前的数据
          currentPDFPages = [];
          selectedPages.clear();
          
          // 显示PDF页面容器
          pdfPagesContainer.style.display = 'block';
          pdfPagesDiv.innerHTML = '';
          
          // 更新页面计数
          pdfPageCountSpan.textContent = `共 ${numPages} 页`;
          updateSelectedPageCount();
          
          // 首先渲染第一页到主预览区域
          pdf.getPage(1).then(function(firstPage) {
            var ctx, renderContext, scale, viewport;
            scale = 1.0; // 主预览使用更大的缩放
            viewport = firstPage.getViewport({
              scale: scale
            });
            
            // 创建主预览canvas
            canvas = document.createElement('canvas');
            canvas.width = viewport.width;
            canvas.height = viewport.height;
            canvas.className = 'canvas-preview';
            ctx = canvas.getContext('2d');
            renderContext = {
              canvasContext: ctx,
              viewport: viewport
            };
            return firstPage.render(renderContext).promise.then(function() {
              var pageTitle;
              // 设置全局变量供水印函数使用
              window.canvas = canvas;
              window.textCtx = ctx;
              window.originalImage = null; // PDF没有原始图片
              
              // 创建重绘函数
              window.redraw = function() {
                // 重新渲染PDF页面
                return firstPage.render(renderContext).promise.then(function() {
                  // 重新应用水印
                  if (watermarkType === 'text' && input.text.value) {
                    return drawTextWatermarkOnCanvas(canvas, ctx);
                  } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
                    return drawImageWatermarkOnCanvas(canvas, ctx);
                  }
                });
              };
              
              // 应用当前水印设置
              if (watermarkType === 'text' && input.text.value) {
                drawTextWatermarkOnCanvas(canvas, ctx);
              } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
                drawImageWatermarkOnCanvas(canvas, ctx);
              }
              
              // 显示在主预览区域
              graph.innerHTML = '';
              
              // 添加页面标题
              pageTitle = document.createElement('h3');
              pageTitle.textContent = "PDF预览 - 第1页";
              pageTitle.style.textAlign = 'center';
              pageTitle.style.margin = '10px 0';
              pageTitle.id = 'pdf-preview-title';
              graph.appendChild(pageTitle);
              graph.appendChild(canvas);
              
              // 添加点击下载功能
              return canvas.addEventListener('click', function() {
                var blob, downloadFormat, imageData, link, ref;
                downloadFormat = ((ref = document.querySelector('input[name="download-format"]:checked')) != null ? ref.value : void 0) || 'png';
                link = document.createElement('a');
                link.download = generateFileName(1, true);
                if (downloadFormat === 'png') {
                  imageData = canvas.toDataURL('image/png');
                } else {
                  imageData = canvas.toDataURL(`image/${downloadFormat}`, 0.95);
                }
                blob = dataURItoBlob(imageData);
                link.href = URL.createObjectURL(blob);
                document.body.appendChild(link);
                link.click();
                return document.body.removeChild(link);
              });
            });
          });
          
          // 添加加载提示
          loadingDiv = document.createElement('div');
          loadingDiv.id = 'pdf-loading';
          loadingDiv.style.textAlign = 'center';
          loadingDiv.style.padding = '20px';
          loadingDiv.style.color = '#666';
          loadingDiv.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 正在生成页面预览...';
          pdfPagesDiv.appendChild(loadingDiv);
          
          // 创建页面预览 - 使用队列确保顺序
          return renderPagesSequentially(pdf, numPages);
        }).catch(function(error) {
          console.error('PDF加载错误:', error);
          console.error('Error details:', error.name, error.message);
          if (error.name === 'InvalidPDFException') {
            return alert('PDF文件格式无效或已损坏');
          } else if (error.name === 'MissingPDFException') {
            return alert('PDF文件内容缺失');
          } else if (error.name === 'UnexpectedResponseException') {
            return alert('PDF文件读取失败，可能文件过大或格式不支持');
          } else {
            return alert(`PDF文件加载失败: ${error.message || '未知错误'}`);
          }
        });
      } catch (error1) {
        generalError = error1;
        console.error('PDF处理异常:', generalError);
        return alert(`PDF处理失败: ${generalError.message || '未知错误'}`);
      }
    };
    fileReader.onerror = function() {
      console.error('PDF文件读取失败');
      return alert('文件读取失败，请检查文件是否损坏或过大');
    };
    return fileReader.readAsArrayBuffer(file);
  };

  // 顺序渲染PDF页面，避免并发问题
  renderPagesSequentially = function(pdf, totalPages) {
    var renderNextPage, renderedCount;
    renderedCount = 0;
    renderNextPage = function(pageNum) {
      var loadingDiv;
      if (pageNum > totalPages) {
        // 所有页面渲染完成，移除加载提示
        loadingDiv = document.getElementById('pdf-loading');
        if (loadingDiv != null) {
          loadingDiv.remove();
        }
        
        // 强制垃圾回收（如果可能）
        if (window.gc != null) {
          window.gc();
        }
        
        // 自动更新预览区域
        updatePreviewArea();
        return;
      }
      return createPagePreview(pageNum, pdf, function() {
        var progress;
        renderedCount++;
        // 更新加载进度
        loadingDiv = document.getElementById('pdf-loading');
        if (loadingDiv) {
          progress = Math.round((renderedCount / totalPages) * 100);
          loadingDiv.innerHTML = `<i class='fas fa-spinner fa-spin'></i> 正在生成页面预览... ${progress}%`;
        }
        
        // 渲染下一页，添加适当的延迟
        return setTimeout(function() {
          return renderNextPage(pageNum + 1);
        }, 100); // 增加延迟确保每页完全渲染完成
      });
    };
    return renderNextPage(1);
  };

  createPagePreview = function(pageNum, pdf, callback = null) {
    var attemptRender;
    // 添加重试机制
    attemptRender = function(retryCount = 0) {
      return pdf.getPage(pageNum).then(function(page) {
        var pageCanvas, pageContext, pageDiv, renderContext, renderTask, scale, viewport;
        scale = 0.3; // 预览缩放
        viewport = page.getViewport({
          scale: scale
        });
        
        // 为每个页面创建独立的容器和canvas
        pageDiv = document.createElement('div');
        pageDiv.className = 'pdf-page';
        pageDiv.dataset.pageNum = pageNum;
        
        // 创建独立的canvas
        pageCanvas = document.createElement('canvas');
        pageCanvas.width = viewport.width;
        pageCanvas.height = viewport.height;
        pageCanvas.style.maxWidth = '100%';
        pageCanvas.style.borderRadius = '4px';
        
        // 确保canvas尺寸正确
        if (pageCanvas.width === 0 || pageCanvas.height === 0) {
          console.warn(`第 ${pageNum} 页canvas尺寸异常，尝试重新渲染`);
          if (retryCount < 2) {
            setTimeout(function() {
              return attemptRender(retryCount + 1);
            }, 200);
            return;
          } else {
            throw new Error("Canvas尺寸异常");
          }
        }
        
        // 获取独立的渲染上下文
        pageContext = pageCanvas.getContext('2d');
        renderContext = {
          canvasContext: pageContext,
          viewport: viewport
        };
        
        // 渲染PDF页面到独立的canvas
        renderTask = page.render(renderContext);
        return renderTask.promise.then(function() {
          var i, imageData, isBlank, k, pageNumber, ref;
          // 验证渲染结果
          imageData = pageContext.getImageData(0, 0, pageCanvas.width, pageCanvas.height);
          isBlank = true;
          for (i = k = 0, ref = imageData.data.length; k < ref; i = k += 4) {
            if (imageData.data[i] !== 255 || imageData.data[i + 1] !== 255 || imageData.data[i + 2] !== 255) {
              isBlank = false;
              break;
            }
          }
          if (isBlank && retryCount < 2) {
            console.warn(`第 ${pageNum} 页渲染为空白，尝试重新渲染`);
            setTimeout(function() {
              return attemptRender(retryCount + 1);
            }, 200);
            return;
          }
          
          // 确保渲染完成后再添加到DOM
          pageDiv.appendChild(pageCanvas);
          pageNumber = document.createElement('div');
          pageNumber.className = 'page-number';
          pageNumber.textContent = `第 ${pageNum} 页`;
          pageDiv.appendChild(pageNumber);
          
          // 添加点击事件监听器
          pageDiv.addEventListener('click', function() {
            if (selectedPages.has(pageNum)) {
              selectedPages.delete(pageNum);
              pageDiv.classList.remove('selected');
            } else {
              selectedPages.add(pageNum);
              pageDiv.classList.add('selected');
            }
            updateSelectedPageCount();
            
            // 自动更新预览区域
            return updatePreviewArea();
          });
          
          // 将完成的页面插入到正确位置（保持页面顺序）
          insertPageInOrder(pageDiv, pageNum);
          return typeof callback === "function" ? callback() : void 0;
        }).catch(function(error) {
          console.error(`第 ${pageNum} 页渲染失败:`, error);
          if (retryCount < 2) {
            console.log(`尝试重新渲染第 ${pageNum} 页 (重试 ${retryCount + 1}/2)`);
            return setTimeout(function() {
              return attemptRender(retryCount + 1);
            }, 500);
          } else {
            return createErrorPlaceholder(pageNum, pageDiv, callback);
          }
        });
      }).catch(function(error) {
        var pageDiv;
        console.error(`获取第 ${pageNum} 页失败:`, error);
        if (retryCount < 2) {
          return setTimeout(function() {
            return attemptRender(retryCount + 1);
          }, 500);
        } else {
          pageDiv = document.createElement('div');
          pageDiv.className = 'pdf-page';
          pageDiv.dataset.pageNum = pageNum;
          return createErrorPlaceholder(pageNum, pageDiv, callback);
        }
      });
    };
    return attemptRender();
  };

  // 创建错误占位符
  createErrorPlaceholder = function(pageNum, pageDiv, callback) {
    var pageNumber;
    pageDiv.innerHTML = `<div style='padding: 20px; text-align: center; color: #999; border: 2px dashed #ddd; border-radius: 4px;'>第 ${pageNum} 页<br><small>渲染失败</small><br><button onclick='location.reload()' style='margin-top:5px; padding:2px 8px; font-size:10px;'>重新加载</button></div>`;
    pageNumber = document.createElement('div');
    pageNumber.className = 'page-number';
    pageNumber.textContent = `第 ${pageNum} 页`;
    pageDiv.appendChild(pageNumber);
    pageDiv.addEventListener('click', function() {
      if (selectedPages.has(pageNum)) {
        selectedPages.delete(pageNum);
        pageDiv.classList.remove('selected');
      } else {
        selectedPages.add(pageNum);
        pageDiv.classList.add('selected');
      }
      updateSelectedPageCount();
      
      // 自动更新预览区域
      return updatePreviewArea();
    });
    insertPageInOrder(pageDiv, pageNum);
    return typeof callback === "function" ? callback() : void 0;
  };

  // 重新渲染PDF页面（用于实时预览）
  rerenderPDFPages = function() {
    var k, len1, pageDiv, pageInfo, results;
    if (!(currentPDFPages.length > 0)) {
      return;
    }
    results = [];
    for (k = 0, len1 = currentPDFPages.length; k < len1; k++) {
      pageInfo = currentPDFPages[k];
      pageDiv = document.querySelector(`[data-page-num='${pageInfo.pageNum}']`);
      if (pageDiv == null) {
        continue;
      }
      
      // 重新渲染页面
      results.push(rerenderSinglePDFPage(pageInfo, pageDiv));
    }
    return results;
  };

  // 重新渲染单个PDF页面
  rerenderSinglePDFPage = function(pageInfo, pageDiv) {
    var error, newCanvas, newContext, renderContext, scale, viewport;
    try {
      scale = 0.3; // 预览缩放
      viewport = pageInfo.page.getViewport({
        scale: scale
      });
      
      // 创建新的canvas
      newCanvas = document.createElement('canvas');
      newCanvas.width = viewport.width;
      newCanvas.height = viewport.height;
      newCanvas.style.maxWidth = '100%';
      newCanvas.style.borderRadius = '4px';
      newContext = newCanvas.getContext('2d');
      renderContext = {
        canvasContext: newContext,
        viewport: viewport
      };
      
      // 渲染PDF页面
      return pageInfo.page.render(renderContext).promise.then(function() {
        var oldCanvas;
        // 应用水印
        if (state.textWatermark || state.imageWatermark) {
          applyWatermarkToPDFPage(newCanvas, newContext);
        }
        
        // 替换现有的canvas
        oldCanvas = pageDiv.querySelector('canvas');
        if (oldCanvas) {
          return pageDiv.replaceChild(newCanvas, oldCanvas);
        } else {
          return pageDiv.insertBefore(newCanvas, pageDiv.firstChild);
        }
      }).catch(function(error) {
        return console.error(`重新渲染第 ${pageInfo.pageNum} 页失败:`, error);
      });
    } catch (error1) {
      error = error1;
      return console.error(`重新渲染第 ${pageInfo.pageNum} 页出错:`, error);
    }
  };

  // 为PDF页面应用水印
  applyWatermarkToPDFPage = function(canvas, context) {
    if (state.textWatermark && input.text.value) {
      drawTextWatermarkOnCanvas(canvas, context);
    }
    if (state.imageWatermark && (watermarkImageFile != null)) {
      return drawImageWatermarkOnCanvas(canvas, context);
    }
  };

  // 应用文本水印到PDF页面
  applyTextWatermark = function(canvas, context) {
    return drawTextWatermarkOnCanvas(canvas, context);
  };

  // 应用图片水印到PDF页面  
  applyImageWatermark = function(canvas, context) {
    return drawImageWatermarkOnCanvas(canvas, context);
  };

  // 按页面顺序插入页面元素
  insertPageInOrder = function(newPageDiv, pageNum) {
    var existingPage, existingPageNum, existingPages, insertBefore, k, len1, loadingDiv;
    loadingDiv = document.getElementById('pdf-loading');
    
    // 找到正确的插入位置
    existingPages = pdfPagesDiv.querySelectorAll('.pdf-page');
    insertBefore = null;
    for (k = 0, len1 = existingPages.length; k < len1; k++) {
      existingPage = existingPages[k];
      existingPageNum = parseInt(existingPage.dataset.pageNum);
      if (existingPageNum > pageNum) {
        insertBefore = existingPage;
        break;
      }
    }
    if (insertBefore) {
      return pdfPagesDiv.insertBefore(newPageDiv, insertBefore);
    } else if (loadingDiv) {
      return pdfPagesDiv.insertBefore(newPageDiv, loadingDiv);
    } else {
      return pdfPagesDiv.appendChild(newPageDiv);
    }
  };

  // 预览选中的页面
  previewSelectedPages = function() {
    var pagesArray, previewContainer, processNextPage, processedCount, progressBar, progressFill;
    if (selectedPages.size === 0) {
      alert('请先选择要预览的页面');
      return;
    }
    if (isProcessing) {
      alert('正在处理中，请稍候...');
      return;
    }
    isProcessing = true;
    graph.innerHTML = '<div class="preview-container"></div>';
    previewContainer = graph.querySelector('.preview-container');
    
    // 创建进度条
    progressBar = document.createElement('div');
    progressBar.className = 'progress-bar';
    progressFill = document.createElement('div');
    progressFill.className = 'progress-fill';
    progressBar.appendChild(progressFill);
    previewContainer.appendChild(progressBar);
    pagesArray = Array.from(selectedPages).sort(function(a, b) {
      return a - b;
    });
    processedCount = 0;
    processNextPage = function(index) {
      var pageNum, progress;
      if (index >= pagesArray.length) {
        // 所有页面处理完成
        progressBar.style.display = 'none';
        isProcessing = false;
        return;
      }
      pageNum = pagesArray[index];
      
      // 更新进度
      progress = ((index + 1) / pagesArray.length) * 100;
      progressFill.style.width = `${progress}%`;
      return pdfDocument.getPage(pageNum).then(function(page) {
        var context, pageCanvas, renderContext, scale, viewport;
        scale = 1.5; // 预览质量
        viewport = page.getViewport({
          scale: scale
        });
        pageCanvas = document.createElement('canvas');
        pageCanvas.width = viewport.width;
        pageCanvas.height = viewport.height;
        context = pageCanvas.getContext('2d');
        renderContext = {
          canvasContext: context,
          viewport: viewport
        };
        return page.render(renderContext).promise.then(function() {
          var pagePreviewDiv, pageTitle;
          // 直接应用水印，不需要Image对象
          if (watermarkType === 'text' && input.text.value) {
            drawTextWatermarkOnCanvas(pageCanvas, context);
          } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
            drawImageWatermarkOnCanvas(pageCanvas, context);
          }
          
          // 添加到预览容器
          pagePreviewDiv = document.createElement('div');
          pagePreviewDiv.className = 'preview-page';
          pagePreviewDiv.dataset.pageNum = pageNum;
          pageTitle = document.createElement('h5');
          pageTitle.textContent = `第 ${pageNum} 页`;
          pagePreviewDiv.appendChild(pageTitle);
          
          // 设置canvas样式
          pageCanvas.className = 'canvas-preview';
          pageCanvas.style.maxWidth = '100%';
          pageCanvas.style.border = '1px solid #ddd';
          pageCanvas.style.borderRadius = '4px';
          pagePreviewDiv.appendChild(pageCanvas);
          
          // 添加点击下载功能
          pageCanvas.addEventListener('click', function() {
            var blob, downloadFormat, imageData, link, ref;
            downloadFormat = ((ref = document.querySelector('input[name="download-format"]:checked')) != null ? ref.value : void 0) || 'png';
            link = document.createElement('a');
            link.download = generateFileName(pageNum, true);
            if (downloadFormat === 'png') {
              imageData = pageCanvas.toDataURL('image/png');
            } else {
              imageData = pageCanvas.toDataURL(`image/${downloadFormat}`, 0.95);
            }
            blob = dataURItoBlob(imageData);
            link.href = URL.createObjectURL(blob);
            document.body.appendChild(link);
            link.click();
            return document.body.removeChild(link);
          });
          previewContainer.appendChild(pagePreviewDiv);
          
          // 处理下一页
          return processNextPage(index + 1);
        }).catch(function(error) {
          console.error(`渲染第${pageNum}页失败:`, error);
          return processNextPage(index + 1);
        });
      }).catch(function(error) {
        console.error(`获取第${pageNum}页失败:`, error);
        return processNextPage(index + 1);
      });
    };
    return processNextPage(0);
  };

  // 下载选中的页面
  downloadSelectedPages = function() {
    var downloadFormat;
    if (selectedPages.size === 0) {
      alert('请先选择要下载的页面');
      return;
    }
    if (isProcessing) {
      alert('正在处理中，请稍候...');
      return;
    }
    downloadFormat = document.querySelector('input[name="download-format"]:checked').value;
    if (downloadFormat === 'pdf') {
      return downloadAsPDF();
    } else {
      return downloadAsImages();
    }
  };

  // 下载为PDF格式
  downloadAsPDF = function() {
    var jsPDFLib, pagesArray, processNextPage, ref;
    console.log('downloadAsPDF开始执行');
    
    // 检查jsPDF是否可用
    jsPDFLib = window.jsPDF || ((ref = window.jspdf) != null ? ref.jsPDF : void 0);
    console.log('jsPDF库检查:', jsPDFLib);
    if (jsPDFLib == null) {
      alert('PDF生成库未加载，请刷新页面重试');
      return;
    }
    isProcessing = true;
    pagesArray = Array.from(selectedPages).sort(function(a, b) {
      return a - b;
    });
    processedCanvases.clear(); // 清除旧缓存
    console.log('准备处理页面:', pagesArray);
    processNextPage = function(index) {
      var error, link, pageNum, pdfBlob;
      console.log(`处理页面索引: ${index}/${pagesArray.length}`);
      if (index >= pagesArray.length) {
        console.log('所有页面处理完成，开始生成PDF');
        // 创建PDF
        if (processedCanvases.size > 0) {
          try {
            pdfBlob = createPDFBlob(Array.from(processedCanvases.values()));
            console.log('生成的PDF blob:', pdfBlob);
            if (pdfBlob) {
              link = document.createElement('a');
              link.download = generateFileName(null, true).replace(/\.[^\/.]+$/, '.pdf');
              link.href = URL.createObjectURL(pdfBlob);
              document.body.appendChild(link);
              link.click();
              document.body.removeChild(link);
              console.log('PDF下载已触发');
            } else {
              alert('PDF生成失败');
              console.error('PDF blob生成失败');
            }
          } catch (error1) {
            error = error1;
            console.error('PDF生成出错:', error);
            alert(`PDF生成失败: ${error.message}`);
          }
        } else {
          alert('没有页面可以下载');
          console.warn('没有处理的canvas');
        }
        isProcessing = false;
        return;
      }
      pageNum = pagesArray[index];
      console.log(`开始处理第${pageNum}页`);
      return state.currentPDF.getPage(pageNum).then(function(page) {
        var context, pageCanvas, renderContext, scale, viewport;
        console.log(`成功获取第${pageNum}页`);
        scale = 2.0; // 高质量
        viewport = page.getViewport({
          scale: scale
        });
        pageCanvas = document.createElement('canvas');
        pageCanvas.width = viewport.width;
        pageCanvas.height = viewport.height;
        context = pageCanvas.getContext('2d');
        renderContext = {
          canvasContext: context,
          viewport: viewport
        };
        return page.render(renderContext).promise.then(function() {
          console.log(`第${pageNum}页渲染完成`);
          
          // 应用水印
          if (watermarkType === 'text' && input.text.value) {
            console.log(`应用文字水印到第${pageNum}页`);
            drawTextWatermarkOnCanvas(pageCanvas, context);
          } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
            console.log(`应用图片水印到第${pageNum}页`);
            drawImageWatermarkOnCanvas(pageCanvas, context);
          }
          processedCanvases.set(pageNum, pageCanvas);
          console.log(`第${pageNum}页已添加到处理列表，当前总数:`, processedCanvases.size);
          
          // 延迟处理下一页
          return setTimeout(function() {
            return processNextPage(index + 1);
          }, 100);
        }).catch(function(error) {
          console.error(`渲染第${pageNum}页失败:`, error);
          return processNextPage(index + 1);
        });
      }).catch(function(error) {
        console.error(`获取第${pageNum}页失败:`, error);
        return processNextPage(index + 1);
      });
    };
    return processNextPage(0);
  };

  // 下载为图片格式
  downloadAsImages = function() {
    var downloadDelay, pagesArray, processNextPage;
    isProcessing = true;
    pagesArray = Array.from(selectedPages).sort(function(a, b) {
      return a - b;
    });
    downloadDelay = 500; // 每次下载间隔500ms
    processNextPage = function(index) {
      var pageNum;
      if (index >= pagesArray.length) {
        isProcessing = false;
        return;
      }
      pageNum = pagesArray[index];
      return state.currentPDF.getPage(pageNum).then(function(page) {
        var context, pageCanvas, renderContext, scale, viewport;
        scale = 2.0; // 高质量
        viewport = page.getViewport({
          scale: scale
        });
        pageCanvas = document.createElement('canvas');
        pageCanvas.width = viewport.width;
        pageCanvas.height = viewport.height;
        context = pageCanvas.getContext('2d');
        renderContext = {
          canvasContext: context,
          viewport: viewport
        };
        return page.render(renderContext).promise.then(function() {
          var blob, downloadFormat, imageData, link;
          // 应用水印
          if (watermarkType === 'text' && input.text.value) {
            drawTextWatermarkOnCanvas(pageCanvas, context);
          } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
            drawImageWatermarkOnCanvas(pageCanvas, context);
          }
          
          // 下载当前页面
          downloadFormat = document.querySelector('input[name="download-format"]:checked').value;
          link = document.createElement('a');
          link.download = generateFileName(pageNum, false);
          if (downloadFormat === 'png') {
            imageData = pageCanvas.toDataURL('image/png');
          } else {
            imageData = pageCanvas.toDataURL(`image/${downloadFormat}`, 0.95);
          }
          blob = dataURItoBlob(imageData);
          link.href = URL.createObjectURL(blob);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          // 延迟处理下一页
          return setTimeout(function() {
            return processNextPage(index + 1);
          }, downloadDelay);
        }).catch(function(error) {
          console.error(`渲染第${pageNum}页失败:`, error);
          return setTimeout(function() {
            return processNextPage(index + 1);
          }, downloadDelay);
        });
      }).catch(function(error) {
        console.error(`获取第${pageNum}页失败:`, error);
        return setTimeout(function() {
          return processNextPage(index + 1);
        }, downloadDelay);
      });
    };
    return processNextPage(0);
  };

  setupCanvas = function(img, pageNum = null) {
    var ctx, pageTitle;
    canvas = document.createElement('canvas');
    canvas.width = img.width;
    canvas.height = img.height;
    canvas.className = 'canvas-preview';
    textCtx = null;
    ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);
    redraw = function() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      return ctx.drawImage(img, 0, 0);
    };
    if (watermarkType === 'text') {
      drawText();
    } else {
      drawImageWatermark();
    }
    graph.innerHTML = '';
    if (pageNum != null) {
      pageTitle = document.createElement('h3');
      pageTitle.textContent = `第 ${pageNum} 页预览`;
      pageTitle.style.textAlign = 'center';
      pageTitle.style.margin = '10px 0';
      graph.appendChild(pageTitle);
    }
    graph.appendChild(canvas);
    return canvas.addEventListener('click', function() {
      var blob, downloadFormat, imageData, link;
      // 确定下载格式
      downloadFormat = 'png'; // 默认PNG
      if (originalFileType != null ? originalFileType.startsWith('image/') : void 0) {
        // 如果原始文件是图片，尝试保持格式
        switch (originalFileType) {
          case 'image/jpeg':
            downloadFormat = 'jpeg';
            break;
          case 'image/webp':
            downloadFormat = 'webp';
            break;
          case 'image/gif':
            downloadFormat = 'gif';
            break;
          default:
            downloadFormat = 'png';
        }
      }
      link = document.createElement('a');
      link.download = generateFileName(pageNum, true);
      if (downloadFormat === 'png') {
        imageData = canvas.toDataURL('image/png');
        blob = dataURItoBlob(imageData);
      } else {
        imageData = canvas.toDataURL(`image/${downloadFormat}`, 0.95);
        blob = dataURItoBlob(imageData);
      }
      link.href = URL.createObjectURL(blob);
      document.body.appendChild(link);
      link.click();
      return document.body.removeChild(link);
    });
  };

  makeStyle = function() {
    var match;
    match = input.color.value.match(/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i);
    return 'rgba(' + (parseInt(match[1], 16)) + ',' + (parseInt(match[2], 16)) + ',' + (parseInt(match[3], 16)) + ',' + input.alpha.value + ')';
  };

  getFontFamily = function() {
    var fontFamily;
    fontFamily = input['font-family'].value;
    switch (fontFamily) {
      case 'system':
        return '-apple-system,BlinkMacSystemFont,"Segoe UI","PingFang SC","Hiragino Sans GB","Microsoft YaHei",sans-serif';
      case 'serif':
        return '"Times New Roman",Times,"宋体",SimSun,"Times",serif';
      case 'sans-serif':
        return 'Arial,"Helvetica Neue",Helvetica,"黑体",SimHei,"Arial",sans-serif';
      case 'monospace':
        return '"Courier New",Courier,"等宽字体","Consolas","Monaco",monospace';
      case 'source-han-sans':
        return '"Source Han Sans","思源黑体","Noto Sans CJK","Microsoft YaHei",sans-serif';
      case 'source-han-serif':
        return '"Source Han Serif","思源宋体","Noto Serif CJK","SimSun",serif';
      case 'noto-sans':
        return '"Noto Sans","Arial","Helvetica",sans-serif';
      case 'roboto':
        return '"Roboto","Arial","Helvetica",sans-serif';
      default:
        return fontFamily + ',sans-serif';
    }
  };

  // 刷新多页预览
  refreshMultiPagePreview = function() {
    var k, len1, pageCanvas, pageDiv, pageNum, previewContainer, previewPages, results;
    previewContainer = graph.querySelector('.preview-container');
    if (previewContainer == null) {
      return;
    }
    
    // 获取所有预览页面元素
    previewPages = previewContainer.querySelectorAll('.preview-page');
    if (!(previewPages.length > 0)) {
      return;
    }

    // 遍历所有预览页面并重新应用水印
    results = [];
    for (k = 0, len1 = previewPages.length; k < len1; k++) {
      pageDiv = previewPages[k];
      pageNum = parseInt(pageDiv.dataset.pageNum);
      if (pageNum == null) {
        continue;
      }
      pageCanvas = pageDiv.querySelector('canvas');
      if (pageCanvas == null) {
        continue;
      }
      
      // 重新渲染这一页
      results.push(refreshSinglePreviewPage(pageNum, pageCanvas, pageDiv));
    }
    return results;
  };

  // 刷新单个预览页面
  refreshSinglePreviewPage = function(pageNum, existingCanvas, pageDiv) {
    if (state.currentPDF == null) {
      return;
    }
    return state.currentPDF.getPage(pageNum).then(function(page) {
      var context, renderContext, scale, viewport;
      scale = 1.5; // 预览质量
      viewport = page.getViewport({
        scale: scale
      });
      
      // 使用现有canvas
      existingCanvas.width = viewport.width;
      existingCanvas.height = viewport.height;
      context = existingCanvas.getContext('2d');
      renderContext = {
        canvasContext: context,
        viewport: viewport
      };
      return page.render(renderContext).promise.then(function() {
        // 重新应用水印
        if (watermarkType === 'text' && input.text.value) {
          return drawTextWatermarkOnCanvas(existingCanvas, context);
        } else if (watermarkType === 'image' && (watermarkImageFile != null)) {
          return drawImageWatermarkOnCanvas(existingCanvas, context);
        }
      }).catch(function(error) {
        return console.error(`刷新第${pageNum}页预览失败:`, error);
      });
    }).catch(function(error) {
      return console.error(`获取第${pageNum}页失败:`, error);
    });
  };

  drawText = function() {
    if (canvas != null) {
      if ((textCtx != null) && typeof redraw === 'function') {
        redraw();
        drawTextWatermarkOnCanvas(canvas, textCtx);
      } else {
        drawTextWatermarkOnCanvas(canvas, canvas.getContext('2d'));
      }
    }
    
    // 如果有多页预览正在显示，也更新预览
    return refreshMultiPagePreview();
  };

  drawTextWatermarkOnCanvas = function(targetCanvas, ctx) {
    var i, j, k, l, len1, line, lineHeight, lineIndex, lineY, m, margin, maxWidth, ref, ref1, ref2, ref3, step, textLines, textSize, totalHeight, width, x, y;
    if (!input.text.value) {
      return;
    }
    textSize = input.size.value * Math.max(15, (Math.min(targetCanvas.width, targetCanvas.height)) / 25);
    ctx.save();
    ctx.translate(targetCanvas.width / 2, targetCanvas.height / 2);
    ctx.rotate(input.angle.value * Math.PI / 180);
    ctx.fillStyle = makeStyle();
    ctx.font = 'bold ' + textSize + 'px ' + getFontFamily();
    
    // 处理换行文字
    textLines = input.text.value.split(/\n|\\n/);
    lineHeight = textSize * 1.2;
    
    // 计算最大文字宽度
    maxWidth = 0;
    for (k = 0, len1 = textLines.length; k < len1; k++) {
      line = textLines[k];
      width = ctx.measureText(line).width;
      maxWidth = Math.max(maxWidth, width);
    }
    
    // 计算总文字高度
    totalHeight = textLines.length * lineHeight;
    step = Math.sqrt((Math.pow(targetCanvas.width, 2)) + (Math.pow(targetCanvas.height, 2)));
    margin = (ctx.measureText('啊')).width;
    x = Math.ceil(step / (maxWidth + margin));
    y = Math.ceil((step / (input.space.value * totalHeight)) / 2);
    for (i = l = ref = -x, ref1 = x; (ref <= ref1 ? l <= ref1 : l >= ref1); i = ref <= ref1 ? ++l : --l) {
      for (j = m = ref2 = -y, ref3 = y; (ref2 <= ref3 ? m <= ref3 : m >= ref3); j = ref2 <= ref3 ? ++m : --m) {
// 绘制多行文字
        for (lineIndex in textLines) {
          line = textLines[lineIndex];
          lineY = (input.space.value * totalHeight * j) + (lineIndex - (textLines.length - 1) / 2) * lineHeight;
          ctx.fillText(line, (maxWidth + margin) * i, lineY);
        }
      }
    }
    ctx.restore();
    if (targetCanvas === canvas) {
      return textCtx = ctx;
    }
  };

  drawImageWatermark = function() {
    if ((canvas != null) && (watermarkImageFile != null)) {
      if ((textCtx != null) && typeof redraw === 'function') {
        redraw();
        drawImageWatermarkOnCanvas(canvas, textCtx);
      } else {
        drawImageWatermarkOnCanvas(canvas, canvas.getContext('2d'));
      }
    }
    
    // 如果有多页预览正在显示，也更新预览
    return refreshMultiPagePreview();
  };

  drawImageWatermarkOnCanvas = function(targetCanvas, ctx) {
    var watermarkReader;
    if (watermarkImageFile == null) {
      return;
    }
    watermarkReader = new FileReader();
    watermarkReader.onload = function() {
      var watermarkImg;
      watermarkImg = new Image();
      watermarkImg.onload = function() {
        var cols, i, j, k, l, position, ratio, ref, ref1, ref2, ref3, rows, watermarkHeight, watermarkSize, watermarkWidth, x, y;
        // 设置透明度
        ctx.save();
        ctx.globalAlpha = parseFloat(input.alpha.value);
        
        // 计算水印大小
        watermarkSize = input.size.value * Math.min(targetCanvas.width, targetCanvas.height) / 8;
        ratio = watermarkImg.width / watermarkImg.height;
        watermarkWidth = watermarkSize;
        watermarkHeight = watermarkSize / ratio;
        position = input['watermark-position'].value;
        switch (position) {
          case 'center':
            x = (targetCanvas.width - watermarkWidth) / 2;
            y = (targetCanvas.height - watermarkHeight) / 2;
            ctx.drawImage(watermarkImg, x, y, watermarkWidth, watermarkHeight);
            break;
          case 'top-left':
            ctx.drawImage(watermarkImg, 20, 20, watermarkWidth, watermarkHeight);
            break;
          case 'top-right':
            ctx.drawImage(watermarkImg, targetCanvas.width - watermarkWidth - 20, 20, watermarkWidth, watermarkHeight);
            break;
          case 'bottom-left':
            ctx.drawImage(watermarkImg, 20, targetCanvas.height - watermarkHeight - 20, watermarkWidth, watermarkHeight);
            break;
          case 'bottom-right':
            ctx.drawImage(watermarkImg, targetCanvas.width - watermarkWidth - 20, targetCanvas.height - watermarkHeight - 20, watermarkWidth, watermarkHeight);
            break;
          case 'repeat':
            // 平铺水印
            ctx.translate(targetCanvas.width / 2, targetCanvas.height / 2);
            ctx.rotate(input.angle.value * Math.PI / 180);
            cols = Math.ceil(targetCanvas.width / (watermarkWidth * input.space.value));
            rows = Math.ceil(targetCanvas.height / (watermarkHeight * input.space.value));
            for (i = k = ref = -cols, ref1 = cols; (ref <= ref1 ? k <= ref1 : k >= ref1); i = ref <= ref1 ? ++k : --k) {
              for (j = l = ref2 = -rows, ref3 = rows; (ref2 <= ref3 ? l <= ref3 : l >= ref3); j = ref2 <= ref3 ? ++l : --l) {
                x = i * watermarkWidth * input.space.value;
                y = j * watermarkHeight * input.space.value;
                ctx.drawImage(watermarkImg, x - watermarkWidth / 2, y - watermarkHeight / 2, watermarkWidth, watermarkHeight);
              }
            }
        }
        ctx.restore();
        if (targetCanvas === canvas) {
          return textCtx = ctx;
        }
      };
      return watermarkImg.src = watermarkReader.result;
    };
    return watermarkReader.readAsDataURL(watermarkImageFile);
  };

  // 文件选择事件
  image.addEventListener('change', function() {
    var ref, supportedTypes;
    file = this.files[0];
    
    // 支持更多图片格式和PDF
    supportedTypes = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/svg+xml', 'application/pdf'];
    if (ref = file.type, indexOf.call(supportedTypes, ref) < 0) {
      alert('仅支持图片文件 (PNG, JPG, GIF, WebP, BMP, SVG) 和 PDF 文件');
      return;
    }
    
    // 隐藏PDF页面容器
    pdfPagesContainer.style.display = 'none';
    selectedPages.clear();
    graph.innerHTML = '';
    return readFile();
  });

  // 水印类型切换
  textWatermarkRadio.addEventListener('change', function() {
    var isPDF;
    if (this.checked) {
      console.log("切换到文字水印");
      watermarkType = 'text';
      textWatermarkOptions.style.display = 'block';
      imageWatermarkOptions.style.display = 'none';
      isPDF = originalFileType === 'application/pdf';
      if (!isPDF && (canvas != null) && input.text.value && autoRefresh.checked) {
        console.log("应用文字水印到单页图片");
        drawText();
      }
      
      // 对于PDF文件，强制更新预览区域
      if (isPDF) {
        console.log("PDF文件，强制更新预览区域（文字水印）");
        isUpdatingPreview = false; // 强制清除标志
        return updatePreviewArea();
      }
    }
  });

  imageWatermarkRadio.addEventListener('change', function() {
    var isPDF;
    if (this.checked) {
      console.log("切换到图片水印");
      watermarkType = 'image';
      textWatermarkOptions.style.display = 'none';
      imageWatermarkOptions.style.display = 'block';
      isPDF = originalFileType === 'application/pdf';
      if (!isPDF && (canvas != null) && (watermarkImageFile != null) && autoRefresh.checked) {
        console.log("应用图片水印到单页图片");
        drawImageWatermark();
      }
      
      // 对于PDF文件，强制更新预览区域
      if (isPDF) {
        console.log("PDF文件，强制更新预览区域（图片水印）");
        isUpdatingPreview = false; // 强制清除标志
        return updatePreviewArea();
      }
    }
  });

  // 水印图片选择
  watermarkImage.addEventListener('change', function() {
    var imageTypes, ref;
    watermarkImageFile = this.files[0];
    imageTypes = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/svg+xml'];
    if (ref = watermarkImageFile.type, indexOf.call(imageTypes, ref) < 0) {
      alert('水印仅支持图片格式');
      return;
    }
    if ((canvas != null) && watermarkType === 'image') {
      if (autoRefresh.checked) {
        drawImageWatermark();
      }
    }
    
    // 对于PDF文件，更新预览区域显示图片水印
    if (originalFileType === 'application/pdf') {
      return updatePreviewArea();
    }
  });

  // PDF页面选择按钮
  selectAllPagesBtn.addEventListener('click', function() {
    var k, len1, page, pageNum, pages;
    pages = pdfPagesDiv.querySelectorAll('.pdf-page');
    for (k = 0, len1 = pages.length; k < len1; k++) {
      page = pages[k];
      pageNum = parseInt(page.dataset.pageNum);
      selectedPages.add(pageNum);
      page.classList.add('selected');
    }
    updateSelectedPageCount();
    // 自动更新预览区域
    return updatePreviewArea();
  });

  clearSelectionBtn.addEventListener('click', function() {
    var k, len1, page, pages;
    pages = pdfPagesDiv.querySelectorAll('.pdf-page');
    for (k = 0, len1 = pages.length; k < len1; k++) {
      page = pages[k];
      page.classList.remove('selected');
    }
    selectedPages.clear();
    updateSelectedPageCount();
    // 自动更新预览区域
    return updatePreviewArea();
  });

  previewSelectedPagesBtn.addEventListener('click', function() {
    // 刷新预览区域，使用新开发的自动预览功能
    return updatePreviewArea();
  });

  downloadSelectedPagesBtn.addEventListener('click', downloadSelectedPages);

  // 范围输入控件
  inputItems.forEach(function(item) {
    var el;
    el = $('#' + item);
    return input[item] = el;
  });

  // 注意：实时更新范围值显示的事件监听器会在后面的代码中添加

  // 自动刷新切换
  autoRefresh.addEventListener('change', function() {
    if (this.checked) {
      return refresh.setAttribute('disabled', 'disabled');
    } else {
      return refresh.removeAttribute('disabled');
    }
  });

  // 输入变化事件
  inputItems.forEach(function(item) {
    var el, ref, updatePreviewOnChange;
    el = $('#' + item);
    
    // 将范围值显示更新添加到每个滑块
    if (el.type === 'range') {
      el.addEventListener('input', updateRangeValues);
    }
    
    // 对于任何参数调整，直接更新所有内容
    updatePreviewOnChange = function() {
      var isPDF;
      console.log(`参数变更: ${item}, 类型: ${el.type}, 值: ${el.value}`);
      
      // 标记当前是PDF文件
      isPDF = originalFileType === 'application/pdf';
      console.log(`文件类型: ${originalFileType}, 是否PDF: ${isPDF}`);
      if (!isPDF && autoRefresh.checked) {
        if (watermarkType === 'text') {
          console.log(`应用文字水印到单页图片: ${input.text.value}`);
          drawText();
        } else if (watermarkImageFile != null) {
          console.log("应用图片水印到单页图片");
          drawImageWatermark();
        }
      }
      
      // 对于PDF文件，直接强制更新预览区域
      if (isPDF) {
        console.log("PDF文件，直接更新预览区域，跳过单页更新");
        
        // 强制清除更新标志，确保能够重新触发更新
        isUpdatingPreview = false;
        if (updateTimeout) {
          
          // 强制触发预览更新
          clearTimeout(updateTimeout);
        }
        return updateTimeout = setTimeout(function() {
          return updatePreviewArea();
        }, 50);
      } else {
        return console.log("非PDF文件，不更新预览区域");
      }
    };
    
    // 为range和color元素使用input事件（实时更新）
    // 为其他元素使用change事件
    if ((ref = el.type) === 'range' || ref === 'color') {
      return el.addEventListener('input', updatePreviewOnChange);
    } else {
      return el.addEventListener('change', updatePreviewOnChange);
    }
  });

  // 文字区域支持换行
  ($('#text')).addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      // 允许回车换行
      return true;
    }
  });

  // 手动刷新按钮
  refresh.addEventListener('click', function() {
    var isPDF;
    console.log("点击刷新按钮");
    isPDF = originalFileType === 'application/pdf';
    if (!isPDF) {
      if (watermarkType === 'text') {
        console.log("应用文字水印到单页图片");
        drawText();
      } else if (watermarkImageFile != null) {
        console.log("应用图片水印到单页图片");
        drawImageWatermark();
      }
    }
    
    // 对于PDF文件，强制刷新预览区域
    if (isPDF) {
      console.log("PDF文件，强制刷新预览区域");
      
      // 强制清除更新标志，确保能够重新触发更新
      isUpdatingPreview = false;
      
      // 立即触发预览更新
      return updatePreviewArea();
    }
  });

  // 拖拽上传支持
  fileUploadLabel = $('.file-upload-label');

  fileUploadLabel.addEventListener('dragover', function(e) {
    e.preventDefault();
    this.style.borderColor = '#764ba2';
    return this.style.background = 'rgba(102, 126, 234, 0.15)';
  });

  fileUploadLabel.addEventListener('dragleave', function(e) {
    e.preventDefault();
    this.style.borderColor = '#667eea';
    return this.style.background = 'rgba(102, 126, 234, 0.05)';
  });

  fileUploadLabel.addEventListener('drop', function(e) {
    var files;
    e.preventDefault();
    this.style.borderColor = '#667eea';
    this.style.background = 'rgba(102, 126, 234, 0.05)';
    files = e.dataTransfer.files;
    if (files.length > 0) {
      image.files = files;
      return image.dispatchEvent(new Event('change'));
    }
  });

  // 初始化范围值显示
  updateRangeValues();

  // 初始化预览区域，显示操作指引
  initializePreviewArea = function() {
    var previewContainer, welcomeMessage;
    graph.innerHTML = '<div class="preview-container"></div>';
    previewContainer = graph.querySelector('.preview-container');
    welcomeMessage = document.createElement('div');
    welcomeMessage.className = 'welcome-message';
    welcomeMessage.innerHTML = `<div class="welcome-icon"><i class="fas fa-file-upload"></i></div>
<h3>欢迎使用图片水印工具</h3>
<p>请上传图片或PDF文件，然后选择水印类型（文本或图片）</p>
<p>对于PDF文件，您可以：</p>
<ul>
    <li>在左侧选择需要添加水印的页面</li>
    <li>在本区域查看预览效果</li>
    <li>调整水印的样式、位置和透明度</li>
    <li>下载添加了水印的文件</li>
</ul>`;
    return previewContainer.appendChild(welcomeMessage);
  };

  // 页面加载完成后初始化预览区域
  initializePreviewArea();

}).call(this);
